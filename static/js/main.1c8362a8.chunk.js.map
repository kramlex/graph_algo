{"version":3,"sources":["Main.js","algo.js","index.js"],"names":["TextArea","Input","AppDiv","styled","div","GraphsDiv","GraphDiv","TextAreaStyled","ButtonStyled","Button","ButtonDfst","DfstDiv","graph1init","nodes","id","label","title","edges","graph2init","Kek","useState","graph1","setGraph1","graph2","setGraph2","matrix","setMatrix","ta","useRef","iRef","options","layout","hierarchical","color","height","events","select","event","ref","placeholder","onClick","data","current","state","value","replaceAll","split","filter","word","n","Math","sqrt","length","newArr","push","splice","newGraph1","map","index","toString","forEach","val","val2","index2","from","to","a","console","log","res","t","e","v","status","parent","x","isExplore","y","isFind","dfst","newGraph2","graph","getNetwork","network","elementById","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.1c8362a8.chunk.js","sourcesContent":["import React, {useRef, useState} from 'react'\nimport Graph from 'react-graph-vis'\nimport { Input, Button} from \"antd\";\nimport styled from 'styled-components'\nimport 'antd/dist/antd.css';\nimport {dfst} from \"./algo\";\n\nconst {TextArea} = Input;\n\nconst AppDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`\n\nconst GraphsDiv = styled.div`\n  display: flex;\n`\n\nconst GraphDiv = styled.div`\n  margin: 20px;\n  border: black 1px solid;\n  width: 45vw;\n`\n\nconst TextAreaStyled = styled(TextArea)`\n  margin-top: 50px;\n  width: 500px;\n  height: 500px;\n`\n\nconst ButtonStyled = styled(Button)`\n  margin: 10px;\n  width: 200px;\n`\n\nconst ButtonDfst = styled(Button)`\n  //width: 200px;\n`\n\nconst DfstDiv = styled.div`\n  width: 400px;\n  display: flex;\n`\n\nconst graphInit1 = {\n    nodes: [\n        { id: 1, label: \"Hello\", title: \"node 1 tootip text\" },\n    ],\n}\n\nconst graph1init = {\n    nodes: [\n        { id: 1, label: \"Hello\", title: \"node 1 tootip text\" },\n    ],\n    edges: []\n}\nconst graph2init = {\n    nodes: [\n        { id: 2, label: \"World\", title: \"node 1 tootip text\" },\n    ],\n    edges: [\n        // {from : 1, to: 2},\n    ]\n}\n\nfunction Kek() {\n    const [graph1, setGraph1] = useState(graph1init)\n    const [graph2, setGraph2] = useState(graph2init)\n    const [aVal,setA] = useState(null)\n\n    const [matrix, setMatrix] = useState(null)\n    const ta = useRef(null)\n    const iRef = useRef(null)\n\n    const options = {\n        layout: {\n            hierarchical: false\n        },\n        edges: {\n            color: \"#000000\"\n        },\n        height: \"500px\"\n    };\n\n    const events = {\n        select: function(event) {\n            let { nodes, edges } = event;\n        }\n    };\n\n    const onReadTextArea = () => {\n        const str = ta.current.state.value\n        let data = str.replaceAll('\\n', ' ')\n            .split(' ')\n            .filter(word => word !== '');\n        let n = Math.sqrt(data.length)\n\n        const newArr = []\n        while(data.length) newArr.push(data.splice(0,n))\n        const newGraph1 = {\n            nodes: [\n                ...newArr.map((value,index) => ({\n                    id: index,\n                    label : index.toString(),\n                    title: ''\n                }))\n            ],\n            edges: [\n            ]\n        }\n        newArr.forEach((val,index) => {\n            val.forEach((val2,index2) => {\n                if(+val2 === 1) {\n                    // console.log('kek')\n                    newGraph1.edges.push({from:index, to: index2})\n                }\n            })\n        })\n        setGraph1(newGraph1)\n        setMatrix(newArr)\n    }\n\n    const onChangeGraph2 = () => {\n        const a = +iRef.current.state.value\n        console.log()\n        const res = dfst(a,matrix)\n        console.log(res)\n        const newGraph2 = {\n            nodes: [\n                ...matrix.map((value,index) => ({\n                    id: index,\n                    label : index.toString(),\n                    title: ''\n                }))\n            ],\n            edges: [\n                ...res,\n                ...res.map(value => {\n                    return {from : value.to , to : value.from}\n                })\n            ]\n        }\n\n        setGraph2(newGraph2)\n        // console.log(newGraph2.edges)\n    }\n    const clearDfst = () => {\n        setGraph2(graph2init)\n    }\n\n\n\n\n    return (\n        <AppDiv>\n            <TextAreaStyled\n                ref = {ta}\n                placeholder = 'Enter adjacency matrix'\n            />\n            <ButtonStyled\n                onClick = {onReadTextArea}\n            >\n                Enter\n            </ButtonStyled>\n\n            <DfstDiv>\n                <Input\n                    placeholder = {'Enter vertex index'}\n                    ref = {iRef}\n                />\n                <ButtonDfst\n                    onClick={onChangeGraph2}\n                >\n                    DFST\n                </ButtonDfst>\n                <Button\n                    onClick={clearDfst}\n                >\n                    Clear DFST\n                </Button>\n            </DfstDiv>\n\n\n\n\n            <GraphsDiv>\n                <GraphDiv>\n                    <Graph\n                        graph={graph1}\n                        options={options}\n                        events={events}\n                        getNetwork={network => {}}\n                    />\n                </GraphDiv>\n                    <GraphDiv>\n                        <Graph\n                            graph={graph2}\n                            options={options}\n                            events={events}\n                            getNetwork={network => {}}\n                        />\n                    </GraphDiv>\n            </GraphsDiv>\n\n\n        </AppDiv>\n\n    );\n}\n\nexport default Kek","// algorith\n\nexport const dfst = (a, matrix) => {\n    console.log(a,matrix)\n    const n = matrix.length;\n    const t = [];\n    const e = [];\n    let v = [];\n    matrix.forEach(() => {\n        const tmp = {status: 0, parent: 0}\n        v.push(tmp);\n    })\n\n    v[a].status = 1;\n    v[a].parent = a;\n\n    let x = a\n    while(v[x].status === 1){\n        let isExplore = false;\n        for(let y = 0; y < n; y++){\n            let isFind = false;\n            e.forEach(val => {\n                if(val.from === x && val.to === y)\n                    isFind = true;\n            })\n            if(y !== v[x].parent && +matrix[x][y] === 1 && !isFind) {\n                isExplore = true;\n                e.push({from:x, to:y})\n                if(v[y].status === 0) {\n                    t.push({from:x, to:y});\n                    v[y].parent = x;\n                    v[y].status = 1;\n                    x = y;\n                    break;\n                }\n            }\n        }\n        if(!isExplore){\n            v[x].status = 2;\n            x = v[x].parent;\n        }\n    }\n    return t;\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Kek from \"./Main\";\n\nlet elementById = document.getElementById('root');\n\nReactDOM.render(\n    <Kek />,\n    elementById\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}